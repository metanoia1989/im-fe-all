<template>
	<view class="" v-if="user">
		<view class="nvue-page-head" ref="pagehead" id="pagehead">
			<view class="navbar" ref="navbar">
				<uni-nav-bar
          :fixed="true"
          :status-bar="true"
          @clickRight="showMenu"
          :loading="!loadFinish"
          :rightIconBool="true"
          right-icon="plus"
          :title="loadFinish ? '聊天' : '加载中'">
        </uni-nav-bar>
			</view>
		</view>
		<uni-list :border="false" v-if="!showSearch" :style="{'margin-bottom':tabbarHeight+'rpx'}">
			<!--  #ifdef  APP-PLUS -->
			<cell>
			<!--  #endif -->
        <template  v-for="(item, index) in sessionList">
          <uni-list-chat :arrayIndex="index" v-if="item.type == 'chat'"
            :border="true" :title="item.target.username"
            :avatar="item.target.userInfo.photo" :note="item.target.userInfo.sign"
            :clickable="true" badge-positon="left"
            :badge-text="Math.floor(Math.random() * 100)"
            :conversation="item"
            @tap="chatWindow(item.id,item.target.username)">
            <view class="chat-custom-right">
              <text class="chat-custom-text">{{$tools.formatChatTime(item.updatedAt)}}</text>
            </view>
          </uni-list-chat>

          <uni-list-chat :arrayIndex="index" v-else-if="item.type == 'groupchat'"
            :border="true" :title="item.target.name"
            :avatar-list="[]" :avatar="item.target.photo"
            :note="item.target.introduction" :clickable="true" badge-positon="left"
            :badge-text="Math.floor(Math.random() * 100)"
            :conversation="item"
            @tap="chatGroupWindow(item.id,item.target.name)">
            <view class="chat-custom-right">
              <text class="chat-custom-text">{{$tools.formatChatTime(item.updatedAt)}}</text>
            </view>
          </uni-list-chat>
        </template>

			<!--  #ifdef  APP-PLUS -->
			</cell>
			<!--  #endif -->
		</uni-list>

		<view class="dropdown" v-if="menu">
			<uni-list class="dropdown-list" :border="false" background="#4c4c4c" borderRadius="10">
				<uni-list-item @click="createGroup" :disabled="true" :style="dropdownlist" :show-extra-icon="true" :extra-icon="extraIconChat" title="发起群聊" :border="false" :showArrow="false" :textStyle="'color: white;'"></uni-list-item>
				<uni-list-item :border="false" @click="queryUsers" :style="dropdownlist" :disabled="true" :show-extra-icon="true"
				 :extra-icon="extraIconPersonadd" title="添加朋友" :showArrow="false" :textStyle="'color: white;'"></uni-list-item>
				<uni-list-item :border="false" @click="scanQrcode" :style="dropdownlist" :disabled="true" :show-extra-icon="true"
				 :extra-icon="extraIconScan" title="扫一扫" :showArrow="false" :textStyle="'color: white;'"></uni-list-item>
			</uni-list>
		</view>

	</view>
</template>
<script>
	import { mapState, mapMutations } from 'vuex'
	import searchAnimation from './searchAnimation.js'
	export default {
		data() {
			return {
				extraIconChat: {
					color: 'white',
					size: '44',
					type: 'chat-filled'
				},
				extraIconPersonadd: {
					color: 'white',
					size: '44',
					type: 'personadd-filled'
				},
				extraIconScan: {
					color: 'white',
					size: '44',
					type: 'scan'
				},
				menu: false,
				options: [{
					text: '标为已读',
					style: {
						backgroundColor: '#4c4c4c'
					}
				}, {
					text: '删除',
					style: {
						backgroundColor: '#fa5151'
					}
				}],
				loading: false,
				uid: "",
				safeBottom: '',
				tabbarHeight: '',
				searchBoxH: '',
				// #ifdef H5
				dropdownlist:'padding:10rpx;padding-left: 40rpx;',
				// #endif
				// #ifndef H5
				dropdownlist:'padding:10rpx;',
				// #endif

			}
		},
		mixins: [searchAnimation],
		computed: {
			...mapState({
				user: state => state.user.userInfo,
				sessionList: state => state.im.conversationList,
				loadFinish: state => state.im.loadFinish,
			}),
		},
		watch: {
			sessionList() {
        console.log("有数据了：", this.sessionList)
			}
		},
		onLoad() {

		},
		onHide() {
			uni.hideKeyboard();
		},
		onUnload() {
			console.log('onUnload')
		},
		onShow() {
			if (!this.user) {
				uni.reLaunch({
					url: "../index/login"
				})
				return;
			}
			this.loading = true;
		},
		onReady() {
			this.searchBoxH = (this.systemInfo.windowHeight - this.systemInfo.statusBarHeight - 36 - 12) * 2;
			this.tabbarHeight = this.systemInfo.windowBottom * 2;
			if (this.systemInfo.platform == "android") {
				this.preloadPage()
			}
		},
		methods: {
			scanQrcode: function() {
        return
				this.menu = false;
				var that = this;
				try {
					uni.scanCode({
						success: function(res) {
							var content = res.result;
							if (content.indexOf("uniChat-uid") != -1) {
								content = content.split("-");
								if (content[2] != undefined) {
									uni.showLoading();
									that.webSocket.showCard(content[2], 'qrcode');
								}
							} else if (content.indexOf("http") != -1) {
								uni.navigateTo({
									url: '/pages/extend/webview?url=' + content
								})
							}
						}
					});
				} catch (e) {
					console.log(e)
				}
			},
			chatWindow: function(sessionId, name) {
				uni.navigateTo({
					url: '/pages/chat/chat?type=chat&id=' + sessionId + "&name=" + name,
				})
			},
			chatGroupWindow: function(sessionId, name) {
				uni.navigateTo({
					url: '/pages/chat/chat?type=groupchat&id=' + sessionId + "&name=" + name,
				})
			},
			showMenu: function() {
				if (!this.menu) {
					this.menu = true;
				} else {
					this.menu = false;
				}
			},
			queryUsers: function() {
				this.menu = false;
				uni.navigateTo({
					url: '/pages/contact/queryUsers',
				})
			},
			createGroup: function() {
				this.menu = false;
				uni.navigateTo({
					url: '/pages/group/createGroup',
				})
			},
			showCard: function(uid, type = 'search') {
				uni.showLoading();
				var that = this;
				console.log(uid)
				uniCloud.callFunction({
					name: 'user',
					data: {
						$url: "getUserByUid",
						token: this.$store.state.user.user_token,
						data: {
							uid: uid
						}
					},
				}).then((res) => {
					uni.hideLoading();
					if (webSocket.checkResultData(res)) {
						uni.setStorageSync("cardUser", res.result.data[0]);
						uni.navigateTo({
							url: '/pages/contact/card?type=' + type
						})
					} else {
						uni.showToast({
							title: '该用户不存在',
							duration: 2000,
							icon: 'none'
						});
					}
				}).catch((err) => {
					uni.hideLoading()
					uni.showModal({
						title: '提示',
						content: err
					});
				})
			},
		}
	}
</script>

<style scoped>
	/* #ifdef H5 */
	page{
		background-color: white;
	}
	/* #endif */
	.nvue-page-head {
		background-color: #ededed;
	}
	.nvue-page-search {
		width: 750rpx;
		/* margin-top: -88rpx; */
	}
	.swipe-action {}

	.navbar {
		background-color: #ededed;
	}

	.fixedView {
		position: fixed;
		width: 750rpx;
		height: 60rpx;
		background-color: transparent;
	}

	.u-title {
		font-weight: 400;
	}


	.dropdown {
		position: fixed;
		z-index: 10071;

		/*  #ifndef  MP-WEIXIN  */
		top: 100rpx;
		right: 20rpx;
		/*  #endif  */

		/*  #ifdef  MP-WEIXIN  */
		top: 160rpx;
		left: 20rpx;
		/*  #endif  */


	}

	.search-label {
		padding: 20rpx;
		background-color: #ededed;
	}

	.search-label-text {
		font-size: 30rpx;
	}

	.item {
		padding: 20rpx;
		flex-direction: row;
	}

	.avatar {
		width: 100rpx;

		height: 100rpx;
		margin-right: 20rpx;
		border-radius: 12rpx;
		position: relative;
	}

	.title-wrap {
		flex-direction: column;
		flex: 1;
	}

	.cell {
		flex-direction: row;
		padding-top: 4rpx;
		padding-bottom: 20rpx;
	}

	.chat-time {
		font-size: 24rpx;
		color: #c7c7c7;
		position: absolute;
		right: 24rpx;
	}

	.chat-custom-text {
		font-size: 24rpx;
		color: #999;
	}

	.dropdown-list {
		background-color: #4c4c4c !important;
		border-radius: 10rpx;
	}
</style>
